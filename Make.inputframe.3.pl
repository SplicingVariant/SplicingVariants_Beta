#this script is to make an input frame for SpliceConstructSearchGrepV0.9.pl or later
#
#Usage: perl Make.inputframe.3.pl (file generated by Construct designer) (gblock-orderfile with file indicater) (the columname in the file indicator in the g-block order file) >output
#
#please fill File1 and File2 columns manually
#
#IN development


use strict;
use warnings;

#read file generated by contstuct designer.pl

open (FILE, $ARGV[0]) or die "$!";

warn "Loading Construct designer file from: $ARGV[0]\n";

my $head=<FILE>;
my @head=split(/\t/,$head);
my $pos_refid;
my $pos_altid;
my $pos_normalseqgrep;
my $pos_altseqgrep;
my $pos_normalsplice_inref;
my $pos_normalsplice_inalt;
my $pos_abesplice_inref;
my $pos_abesplice_inalt;
my $pos_summaryseq;
my $pos_varname;
my $pos_nosplice_inref;
my $pos_nosplice_inalt;
for my $I (0..$#head) {
	$pos_varname=$I if ($head[$I] eq "Var_Name");
	$pos_refid=$I if ($head[$I] eq "Ref_ID");
	$pos_altid=$I if ($head[$I] eq "Alt_ID");
	$pos_normalseqgrep=$I if ($head[$I] eq "grep_NormalSeq");
	$pos_altseqgrep=$I if ($head[$I] eq "grep_MutantSeq");
	$pos_normalsplice_inref=$I if ($head[$I] eq "grep_NormalSplice_In_NormalSeq");
	$pos_normalsplice_inalt=$I if ($head[$I] eq "grep_NormalSplice_IN_MutantSeq");
	$pos_abesplice_inref=$I if ($head[$I] eq "grep_AberrantSplice_In_NormalSeq");
	$pos_abesplice_inalt=$I if ($head[$I] eq "grep_AberrantSplice_IN_MutantSeq");
	$pos_summaryseq=$I if ($head[$I] eq "Summary_Seq");
	$pos_nosplice_inref=$I if ($head[$I]=~/NoSplice_In_NormalSeq/);
	$pos_nosplice_inalt=$I if ($head[$I]=~/NoSplice_In_MutantSeq/);
}

print "Construct_Name\tID\tFile1\tFile2\tAllele\tNoSplicing\tNormaltSplicing\tAberrantSplicing\n";
my %grepseq;
my %grepnormalsplice;
my %grepabesplice;

while (my $I=<FILE>) {
	my @SPL=split(/\t/,$I);
	my $name=$SPL[$pos_varname];
	$name=~s/(\.|:|>)/_/g;
	if ($SPL[$pos_abesplice_inref] eq "No_Expected_Aberrant_Splice") {
		$SPL[$pos_abesplice_inref]=&anonymoussplice($SPL[$pos_summaryseq])
	}
	if ($SPL[$pos_abesplice_inalt] eq"No_Expected_Aberrant_Splice") {
		$SPL[$pos_abesplice_inalt]=&anonymoussplice($SPL[$pos_summaryseq])
	}
	my @temp=split(/,/,$SPL[$pos_nosplice_inref]);
	my $nosplice_inref=$temp[1];
	@temp=split(/,/,$SPL[$pos_nosplice_inalt]);
	my $nosplice_inalt=$temp[1];
	print "REF_$name\t$SPL[$pos_refid]\tNA\tNA\t$SPL[$pos_normalseqgrep]\t$nosplice_inref\t$SPL[$pos_normalsplice_inref]\t$SPL[$pos_abesplice_inref]\n";
	print "ALT_$name\t$SPL[$pos_altid]\tNA\tNA\t$SPL[$pos_altseqgrep]\t$nosplice_inalt\t$SPL[$pos_normalsplice_inalt]\t$SPL[$pos_abesplice_inalt]\n";
}
close(FILE);
warn "Done.\n";

sub anonymoussplice {
	my $strings=shift;
	my $return;
	#ttacgccaagttatttaggtgacaATCACCGAGTCTGAAGAGGTGGTCAGCCGCGAGGTGTCCGGCATCAAGGCCGCCTACGAGGCCGAGCTCGGGGATGCCCGCAAGACCCTTGACTCAGTAGCCAAGGAGCGCGCCCGCCTGCAGCTGGAGCTGAGCAAAGTGCGTGAGGAGTTTAAGGAGCTGAAAGCGC(G/C)[gtgagttcgcccaggtggctgcgtgcctggcggggagtggagagggcggcgggccggcgcccctggccggccgcaggaagggagtgagagggcctggaggccgataactttgccatagtctcctccctccccggaactgcccccagcgggtgactggcagtgtcaaggggctgtctaggcacacagactccttctcttaaatctactctcccctctcttctttag]CAATACCAAGAAGGAGGGTGACCTGATAGCTGCTCAGGCTxxatctagataactgatcataatcagccataccacatttgt
	for my $I (0..length($strings)) {
		if (substr($strings,$I,1) eq ']') {
			$return=substr($strings,$I+1,10)
		}
	}
	return("<Anonymous>$return");
}

